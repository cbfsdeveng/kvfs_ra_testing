// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: super.proto

#ifndef PROTOBUF_super_2eproto__INCLUDED
#define PROTOBUF_super_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pqfs {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_super_2eproto();
void protobuf_AssignDesc_super_2eproto();
void protobuf_ShutdownFile_super_2eproto();

class Superblock;

// ===================================================================

class Superblock : public ::google::protobuf::Message {
 public:
  Superblock();
  virtual ~Superblock();

  Superblock(const Superblock& from);

  inline Superblock& operator=(const Superblock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Superblock& default_instance();

  void Swap(Superblock* other);

  // implements Message ----------------------------------------------

  Superblock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Superblock& from);
  void MergeFrom(const Superblock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 magic = 1;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 1;
  inline ::google::protobuf::int64 magic() const;
  inline void set_magic(::google::protobuf::int64 value);

  // optional string filesystem_name = 2;
  inline bool has_filesystem_name() const;
  inline void clear_filesystem_name();
  static const int kFilesystemNameFieldNumber = 2;
  inline const ::std::string& filesystem_name() const;
  inline void set_filesystem_name(const ::std::string& value);
  inline void set_filesystem_name(const char* value);
  inline void set_filesystem_name(const char* value, size_t size);
  inline ::std::string* mutable_filesystem_name();
  inline ::std::string* release_filesystem_name();
  inline void set_allocated_filesystem_name(::std::string* filesystem_name);

  // optional string cloud_uri = 3;
  inline bool has_cloud_uri() const;
  inline void clear_cloud_uri();
  static const int kCloudUriFieldNumber = 3;
  inline const ::std::string& cloud_uri() const;
  inline void set_cloud_uri(const ::std::string& value);
  inline void set_cloud_uri(const char* value);
  inline void set_cloud_uri(const char* value, size_t size);
  inline ::std::string* mutable_cloud_uri();
  inline ::std::string* release_cloud_uri();
  inline void set_allocated_cloud_uri(::std::string* cloud_uri);

  // optional int64 next_inode = 4;
  inline bool has_next_inode() const;
  inline void clear_next_inode();
  static const int kNextInodeFieldNumber = 4;
  inline ::google::protobuf::int64 next_inode() const;
  inline void set_next_inode(::google::protobuf::int64 value);

  // optional int64 next_xid = 5;
  inline bool has_next_xid() const;
  inline void clear_next_xid();
  static const int kNextXidFieldNumber = 5;
  inline ::google::protobuf::int64 next_xid() const;
  inline void set_next_xid(::google::protobuf::int64 value);

  // optional int64 fs_id = 6;
  inline bool has_fs_id() const;
  inline void clear_fs_id();
  static const int kFsIdFieldNumber = 6;
  inline ::google::protobuf::int64 fs_id() const;
  inline void set_fs_id(::google::protobuf::int64 value);

  // optional int64 dev = 7;
  inline bool has_dev() const;
  inline void clear_dev();
  static const int kDevFieldNumber = 7;
  inline ::google::protobuf::int64 dev() const;
  inline void set_dev(::google::protobuf::int64 value);

  // optional int64 chunk_size = 8;
  inline bool has_chunk_size() const;
  inline void clear_chunk_size();
  static const int kChunkSizeFieldNumber = 8;
  inline ::google::protobuf::int64 chunk_size() const;
  inline void set_chunk_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pqfs.proto.Superblock)
 private:
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_filesystem_name();
  inline void clear_has_filesystem_name();
  inline void set_has_cloud_uri();
  inline void clear_has_cloud_uri();
  inline void set_has_next_inode();
  inline void clear_has_next_inode();
  inline void set_has_next_xid();
  inline void clear_has_next_xid();
  inline void set_has_fs_id();
  inline void clear_has_fs_id();
  inline void set_has_dev();
  inline void clear_has_dev();
  inline void set_has_chunk_size();
  inline void clear_has_chunk_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 magic_;
  ::std::string* filesystem_name_;
  ::std::string* cloud_uri_;
  ::google::protobuf::int64 next_inode_;
  ::google::protobuf::int64 next_xid_;
  ::google::protobuf::int64 fs_id_;
  ::google::protobuf::int64 dev_;
  ::google::protobuf::int64 chunk_size_;
  friend void  protobuf_AddDesc_super_2eproto();
  friend void protobuf_AssignDesc_super_2eproto();
  friend void protobuf_ShutdownFile_super_2eproto();

  void InitAsDefaultInstance();
  static Superblock* default_instance_;
};
// ===================================================================


// ===================================================================

// Superblock

// optional int64 magic = 1;
inline bool Superblock::has_magic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Superblock::set_has_magic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Superblock::clear_has_magic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Superblock::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
  clear_has_magic();
}
inline ::google::protobuf::int64 Superblock::magic() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.magic)
  return magic_;
}
inline void Superblock::set_magic(::google::protobuf::int64 value) {
  set_has_magic();
  magic_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.magic)
}

// optional string filesystem_name = 2;
inline bool Superblock::has_filesystem_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Superblock::set_has_filesystem_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Superblock::clear_has_filesystem_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Superblock::clear_filesystem_name() {
  if (filesystem_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filesystem_name_->clear();
  }
  clear_has_filesystem_name();
}
inline const ::std::string& Superblock::filesystem_name() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.filesystem_name)
  return *filesystem_name_;
}
inline void Superblock::set_filesystem_name(const ::std::string& value) {
  set_has_filesystem_name();
  if (filesystem_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filesystem_name_ = new ::std::string;
  }
  filesystem_name_->assign(value);
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.filesystem_name)
}
inline void Superblock::set_filesystem_name(const char* value) {
  set_has_filesystem_name();
  if (filesystem_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filesystem_name_ = new ::std::string;
  }
  filesystem_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pqfs.proto.Superblock.filesystem_name)
}
inline void Superblock::set_filesystem_name(const char* value, size_t size) {
  set_has_filesystem_name();
  if (filesystem_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filesystem_name_ = new ::std::string;
  }
  filesystem_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pqfs.proto.Superblock.filesystem_name)
}
inline ::std::string* Superblock::mutable_filesystem_name() {
  set_has_filesystem_name();
  if (filesystem_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filesystem_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pqfs.proto.Superblock.filesystem_name)
  return filesystem_name_;
}
inline ::std::string* Superblock::release_filesystem_name() {
  clear_has_filesystem_name();
  if (filesystem_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filesystem_name_;
    filesystem_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Superblock::set_allocated_filesystem_name(::std::string* filesystem_name) {
  if (filesystem_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filesystem_name_;
  }
  if (filesystem_name) {
    set_has_filesystem_name();
    filesystem_name_ = filesystem_name;
  } else {
    clear_has_filesystem_name();
    filesystem_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pqfs.proto.Superblock.filesystem_name)
}

// optional string cloud_uri = 3;
inline bool Superblock::has_cloud_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Superblock::set_has_cloud_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Superblock::clear_has_cloud_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Superblock::clear_cloud_uri() {
  if (cloud_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloud_uri_->clear();
  }
  clear_has_cloud_uri();
}
inline const ::std::string& Superblock::cloud_uri() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.cloud_uri)
  return *cloud_uri_;
}
inline void Superblock::set_cloud_uri(const ::std::string& value) {
  set_has_cloud_uri();
  if (cloud_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloud_uri_ = new ::std::string;
  }
  cloud_uri_->assign(value);
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.cloud_uri)
}
inline void Superblock::set_cloud_uri(const char* value) {
  set_has_cloud_uri();
  if (cloud_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloud_uri_ = new ::std::string;
  }
  cloud_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:pqfs.proto.Superblock.cloud_uri)
}
inline void Superblock::set_cloud_uri(const char* value, size_t size) {
  set_has_cloud_uri();
  if (cloud_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloud_uri_ = new ::std::string;
  }
  cloud_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pqfs.proto.Superblock.cloud_uri)
}
inline ::std::string* Superblock::mutable_cloud_uri() {
  set_has_cloud_uri();
  if (cloud_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cloud_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pqfs.proto.Superblock.cloud_uri)
  return cloud_uri_;
}
inline ::std::string* Superblock::release_cloud_uri() {
  clear_has_cloud_uri();
  if (cloud_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cloud_uri_;
    cloud_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Superblock::set_allocated_cloud_uri(::std::string* cloud_uri) {
  if (cloud_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cloud_uri_;
  }
  if (cloud_uri) {
    set_has_cloud_uri();
    cloud_uri_ = cloud_uri;
  } else {
    clear_has_cloud_uri();
    cloud_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pqfs.proto.Superblock.cloud_uri)
}

// optional int64 next_inode = 4;
inline bool Superblock::has_next_inode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Superblock::set_has_next_inode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Superblock::clear_has_next_inode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Superblock::clear_next_inode() {
  next_inode_ = GOOGLE_LONGLONG(0);
  clear_has_next_inode();
}
inline ::google::protobuf::int64 Superblock::next_inode() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.next_inode)
  return next_inode_;
}
inline void Superblock::set_next_inode(::google::protobuf::int64 value) {
  set_has_next_inode();
  next_inode_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.next_inode)
}

// optional int64 next_xid = 5;
inline bool Superblock::has_next_xid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Superblock::set_has_next_xid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Superblock::clear_has_next_xid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Superblock::clear_next_xid() {
  next_xid_ = GOOGLE_LONGLONG(0);
  clear_has_next_xid();
}
inline ::google::protobuf::int64 Superblock::next_xid() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.next_xid)
  return next_xid_;
}
inline void Superblock::set_next_xid(::google::protobuf::int64 value) {
  set_has_next_xid();
  next_xid_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.next_xid)
}

// optional int64 fs_id = 6;
inline bool Superblock::has_fs_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Superblock::set_has_fs_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Superblock::clear_has_fs_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Superblock::clear_fs_id() {
  fs_id_ = GOOGLE_LONGLONG(0);
  clear_has_fs_id();
}
inline ::google::protobuf::int64 Superblock::fs_id() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.fs_id)
  return fs_id_;
}
inline void Superblock::set_fs_id(::google::protobuf::int64 value) {
  set_has_fs_id();
  fs_id_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.fs_id)
}

// optional int64 dev = 7;
inline bool Superblock::has_dev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Superblock::set_has_dev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Superblock::clear_has_dev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Superblock::clear_dev() {
  dev_ = GOOGLE_LONGLONG(0);
  clear_has_dev();
}
inline ::google::protobuf::int64 Superblock::dev() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.dev)
  return dev_;
}
inline void Superblock::set_dev(::google::protobuf::int64 value) {
  set_has_dev();
  dev_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.dev)
}

// optional int64 chunk_size = 8;
inline bool Superblock::has_chunk_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Superblock::set_has_chunk_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Superblock::clear_has_chunk_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Superblock::clear_chunk_size() {
  chunk_size_ = GOOGLE_LONGLONG(0);
  clear_has_chunk_size();
}
inline ::google::protobuf::int64 Superblock::chunk_size() const {
  // @@protoc_insertion_point(field_get:pqfs.proto.Superblock.chunk_size)
  return chunk_size_;
}
inline void Superblock::set_chunk_size(::google::protobuf::int64 value) {
  set_has_chunk_size();
  chunk_size_ = value;
  // @@protoc_insertion_point(field_set:pqfs.proto.Superblock.chunk_size)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pqfs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_super_2eproto__INCLUDED
