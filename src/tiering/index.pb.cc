// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pqfs {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Index_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Index_reflection_ = NULL;
const ::google::protobuf::Descriptor* InodeOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InodeOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Segment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_index_2eproto() {
  protobuf_AddDesc_index_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "index.proto");
  GOOGLE_CHECK(file != NULL);
  Index_descriptor_ = file->message_type(0);
  static const int Index_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, fs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, first_xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, last_xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, segment_),
  };
  Index_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Index_descriptor_,
      Index::default_instance_,
      Index_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Index));
  InodeOffset_descriptor_ = file->message_type(1);
  static const int InodeOffset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InodeOffset, inode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InodeOffset, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InodeOffset, pathname_),
  };
  InodeOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InodeOffset_descriptor_,
      InodeOffset::default_instance_,
      InodeOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InodeOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InodeOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InodeOffset));
  Segment_descriptor_ = file->message_type(2);
  static const int Segment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, first_xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, last_xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, inode_offset_),
  };
  Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Segment_descriptor_,
      Segment::default_instance_,
      Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Segment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_index_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Index_descriptor_, &Index::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InodeOffset_descriptor_, &InodeOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Segment_descriptor_, &Segment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_index_2eproto() {
  delete Index::default_instance_;
  delete Index_reflection_;
  delete InodeOffset::default_instance_;
  delete InodeOffset_reflection_;
  delete Segment::default_instance_;
  delete Segment_reflection_;
}

void protobuf_AddDesc_index_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013index.proto\022\npqfs.proto\"\201\001\n\005Index\022\r\n\005m"
    "agic\030\001 \001(\003\022\017\n\007version\030\002 \001(\003\022\r\n\005fs_id\030\003 \001"
    "(\003\022\021\n\tfirst_xid\030\004 \001(\003\022\020\n\010last_xid\030\005 \001(\003\022"
    "$\n\007segment\030\006 \003(\0132\023.pqfs.proto.Segment\">\n"
    "\013InodeOffset\022\r\n\005inode\030\001 \001(\003\022\016\n\006offset\030\002 "
    "\001(\003\022\020\n\010pathname\030\003 \001(\t\"}\n\007Segment\022\014\n\004name"
    "\030\001 \001(\t\022\020\n\010checksum\030\002 \001(\003\022\021\n\tfirst_xid\030\003 "
    "\001(\003\022\020\n\010last_xid\030\004 \001(\003\022-\n\014inode_offset\030\005 "
    "\003(\0132\027.pqfs.proto.InodeOffset", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "index.proto", &protobuf_RegisterTypes);
  Index::default_instance_ = new Index();
  InodeOffset::default_instance_ = new InodeOffset();
  Segment::default_instance_ = new Segment();
  Index::default_instance_->InitAsDefaultInstance();
  InodeOffset::default_instance_->InitAsDefaultInstance();
  Segment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_index_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_index_2eproto {
  StaticDescriptorInitializer_index_2eproto() {
    protobuf_AddDesc_index_2eproto();
  }
} static_descriptor_initializer_index_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Index::kMagicFieldNumber;
const int Index::kVersionFieldNumber;
const int Index::kFsIdFieldNumber;
const int Index::kFirstXidFieldNumber;
const int Index::kLastXidFieldNumber;
const int Index::kSegmentFieldNumber;
#endif  // !_MSC_VER

Index::Index()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pqfs.proto.Index)
}

void Index::InitAsDefaultInstance() {
}

Index::Index(const Index& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pqfs.proto.Index)
}

void Index::SharedCtor() {
  _cached_size_ = 0;
  magic_ = GOOGLE_LONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  fs_id_ = GOOGLE_LONGLONG(0);
  first_xid_ = GOOGLE_LONGLONG(0);
  last_xid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:pqfs.proto.Index)
  SharedDtor();
}

void Index::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Index_descriptor_;
}

const Index& Index::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
  return *default_instance_;
}

Index* Index::default_instance_ = NULL;

Index* Index::New() const {
  return new Index;
}

void Index::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Index*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(magic_, last_xid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pqfs.proto.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 magic = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int64 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fs_id;
        break;
      }

      // optional int64 fs_id = 3;
      case 3: {
        if (tag == 24) {
         parse_fs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fs_id_)));
          set_has_fs_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_first_xid;
        break;
      }

      // optional int64 first_xid = 4;
      case 4: {
        if (tag == 32) {
         parse_first_xid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_xid_)));
          set_has_first_xid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_xid;
        break;
      }

      // optional int64 last_xid = 5;
      case 5: {
        if (tag == 40) {
         parse_last_xid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_xid_)));
          set_has_last_xid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_segment;
        break;
      }

      // repeated .pqfs.proto.Segment segment = 6;
      case 6: {
        if (tag == 50) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_segment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pqfs.proto.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pqfs.proto.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pqfs.proto.Index)
  // optional int64 magic = 1;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->magic(), output);
  }

  // optional int64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // optional int64 fs_id = 3;
  if (has_fs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fs_id(), output);
  }

  // optional int64 first_xid = 4;
  if (has_first_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->first_xid(), output);
  }

  // optional int64 last_xid = 5;
  if (has_last_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_xid(), output);
  }

  // repeated .pqfs.proto.Segment segment = 6;
  for (int i = 0; i < this->segment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->segment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pqfs.proto.Index)
}

::google::protobuf::uint8* Index::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pqfs.proto.Index)
  // optional int64 magic = 1;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->magic(), target);
  }

  // optional int64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // optional int64 fs_id = 3;
  if (has_fs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fs_id(), target);
  }

  // optional int64 first_xid = 4;
  if (has_first_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->first_xid(), target);
  }

  // optional int64 last_xid = 5;
  if (has_last_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_xid(), target);
  }

  // repeated .pqfs.proto.Segment segment = 6;
  for (int i = 0; i < this->segment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->segment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pqfs.proto.Index)
  return target;
}

int Index::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 magic = 1;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic());
    }

    // optional int64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 fs_id = 3;
    if (has_fs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fs_id());
    }

    // optional int64 first_xid = 4;
    if (has_first_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_xid());
    }

    // optional int64 last_xid = 5;
    if (has_last_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_xid());
    }

  }
  // repeated .pqfs.proto.Segment segment = 6;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Index* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Index*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_fs_id()) {
      set_fs_id(from.fs_id());
    }
    if (from.has_first_xid()) {
      set_first_xid(from.first_xid());
    }
    if (from.has_last_xid()) {
      set_last_xid(from.last_xid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {

  return true;
}

void Index::Swap(Index* other) {
  if (other != this) {
    std::swap(magic_, other->magic_);
    std::swap(version_, other->version_);
    std::swap(fs_id_, other->fs_id_);
    std::swap(first_xid_, other->first_xid_);
    std::swap(last_xid_, other->last_xid_);
    segment_.Swap(&other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Index_descriptor_;
  metadata.reflection = Index_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InodeOffset::kInodeFieldNumber;
const int InodeOffset::kOffsetFieldNumber;
const int InodeOffset::kPathnameFieldNumber;
#endif  // !_MSC_VER

InodeOffset::InodeOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pqfs.proto.InodeOffset)
}

void InodeOffset::InitAsDefaultInstance() {
}

InodeOffset::InodeOffset(const InodeOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pqfs.proto.InodeOffset)
}

void InodeOffset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inode_ = GOOGLE_LONGLONG(0);
  offset_ = GOOGLE_LONGLONG(0);
  pathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InodeOffset::~InodeOffset() {
  // @@protoc_insertion_point(destructor:pqfs.proto.InodeOffset)
  SharedDtor();
}

void InodeOffset::SharedDtor() {
  if (pathname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pathname_;
  }
  if (this != default_instance_) {
  }
}

void InodeOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InodeOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InodeOffset_descriptor_;
}

const InodeOffset& InodeOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
  return *default_instance_;
}

InodeOffset* InodeOffset::default_instance_ = NULL;

InodeOffset* InodeOffset::New() const {
  return new InodeOffset;
}

void InodeOffset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InodeOffset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(inode_, offset_);
    if (has_pathname()) {
      if (pathname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pathname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InodeOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pqfs.proto.InodeOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 inode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inode_)));
          set_has_inode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int64 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pathname;
        break;
      }

      // optional string pathname = 3;
      case 3: {
        if (tag == 26) {
         parse_pathname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pathname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pqfs.proto.InodeOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pqfs.proto.InodeOffset)
  return false;
#undef DO_
}

void InodeOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pqfs.proto.InodeOffset)
  // optional int64 inode = 1;
  if (has_inode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->inode(), output);
  }

  // optional int64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  // optional string pathname = 3;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pathname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pathname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pqfs.proto.InodeOffset)
}

::google::protobuf::uint8* InodeOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pqfs.proto.InodeOffset)
  // optional int64 inode = 1;
  if (has_inode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->inode(), target);
  }

  // optional int64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  // optional string pathname = 3;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pathname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pathname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pqfs.proto.InodeOffset)
  return target;
}

int InodeOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 inode = 1;
    if (has_inode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inode());
    }

    // optional int64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

    // optional string pathname = 3;
    if (has_pathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InodeOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InodeOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InodeOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InodeOffset::MergeFrom(const InodeOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inode()) {
      set_inode(from.inode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_pathname()) {
      set_pathname(from.pathname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InodeOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InodeOffset::CopyFrom(const InodeOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeOffset::IsInitialized() const {

  return true;
}

void InodeOffset::Swap(InodeOffset* other) {
  if (other != this) {
    std::swap(inode_, other->inode_);
    std::swap(offset_, other->offset_);
    std::swap(pathname_, other->pathname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InodeOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InodeOffset_descriptor_;
  metadata.reflection = InodeOffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Segment::kNameFieldNumber;
const int Segment::kChecksumFieldNumber;
const int Segment::kFirstXidFieldNumber;
const int Segment::kLastXidFieldNumber;
const int Segment::kInodeOffsetFieldNumber;
#endif  // !_MSC_VER

Segment::Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pqfs.proto.Segment)
}

void Segment::InitAsDefaultInstance() {
}

Segment::Segment(const Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pqfs.proto.Segment)
}

void Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_ = GOOGLE_LONGLONG(0);
  first_xid_ = GOOGLE_LONGLONG(0);
  last_xid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:pqfs.proto.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Segment_descriptor_;
}

const Segment& Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
  return *default_instance_;
}

Segment* Segment::default_instance_ = NULL;

Segment* Segment::New() const {
  return new Segment;
}

void Segment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Segment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(checksum_, last_xid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  inode_offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pqfs.proto.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // optional int64 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_first_xid;
        break;
      }

      // optional int64 first_xid = 3;
      case 3: {
        if (tag == 24) {
         parse_first_xid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_xid_)));
          set_has_first_xid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_xid;
        break;
      }

      // optional int64 last_xid = 4;
      case 4: {
        if (tag == 32) {
         parse_last_xid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_xid_)));
          set_has_last_xid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inode_offset;
        break;
      }

      // repeated .pqfs.proto.InodeOffset inode_offset = 5;
      case 5: {
        if (tag == 42) {
         parse_inode_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inode_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inode_offset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pqfs.proto.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pqfs.proto.Segment)
  return false;
#undef DO_
}

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pqfs.proto.Segment)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->checksum(), output);
  }

  // optional int64 first_xid = 3;
  if (has_first_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->first_xid(), output);
  }

  // optional int64 last_xid = 4;
  if (has_last_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_xid(), output);
  }

  // repeated .pqfs.proto.InodeOffset inode_offset = 5;
  for (int i = 0; i < this->inode_offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inode_offset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pqfs.proto.Segment)
}

::google::protobuf::uint8* Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pqfs.proto.Segment)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 checksum = 2;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->checksum(), target);
  }

  // optional int64 first_xid = 3;
  if (has_first_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->first_xid(), target);
  }

  // optional int64 last_xid = 4;
  if (has_last_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_xid(), target);
  }

  // repeated .pqfs.proto.InodeOffset inode_offset = 5;
  for (int i = 0; i < this->inode_offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->inode_offset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pqfs.proto.Segment)
  return target;
}

int Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 checksum = 2;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->checksum());
    }

    // optional int64 first_xid = 3;
    if (has_first_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_xid());
    }

    // optional int64 last_xid = 4;
    if (has_last_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_xid());
    }

  }
  // repeated .pqfs.proto.InodeOffset inode_offset = 5;
  total_size += 1 * this->inode_offset_size();
  for (int i = 0; i < this->inode_offset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inode_offset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  inode_offset_.MergeFrom(from.inode_offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_first_xid()) {
      set_first_xid(from.first_xid());
    }
    if (from.has_last_xid()) {
      set_last_xid(from.last_xid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {

  return true;
}

void Segment::Swap(Segment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(checksum_, other->checksum_);
    std::swap(first_xid_, other->first_xid_);
    std::swap(last_xid_, other->last_xid_);
    inode_offset_.Swap(&other->inode_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Segment_descriptor_;
  metadata.reflection = Segment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pqfs

// @@protoc_insertion_point(global_scope)
